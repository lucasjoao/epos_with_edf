Index: app/edf_test.cc
===================================================================
--- app/edf_test.cc	(nonexistent)
+++ app/edf_test.cc	(working copy)
@@ -0,0 +1,75 @@
+#include <utility/ostream.h>
+#include <real-time.h>
+
+using namespace EPOS;
+
+OStream cout;
+
+int function_thread01() {
+    TSC_Chronometer chronometer;
+    do {
+        chronometer.reset();
+        chronometer.start();
+        cout <<  "start thread01" << endl;
+        for(; chronometer.read() < 1000000; );
+        chronometer.stop();
+        cout << "thread01 terminou em " << chronometer.read() << " microseconds" << endl;
+        chronometer.reset();
+    } while (Periodic_Thread::wait_next());
+    return 0;
+}
+int function_thread02() {
+    TSC_Chronometer chronometer;
+    do {
+        chronometer.reset();
+        chronometer.start();
+        cout << "start thread02" << endl;
+        for(; chronometer.read() < 2000000; );
+        chronometer.stop();
+        cout << "thread02 terminou em " << chronometer.read() << " microseconds" << endl;
+        chronometer.reset();
+    } while (Periodic_Thread::wait_next());
+    return 0;
+}
+
+int function_thread03() {
+    TSC_Chronometer chronometer;
+    do {
+        chronometer.reset();
+        chronometer.start();
+        cout << "start thread03" << endl;
+        for(; chronometer.read() < 3000000; );
+        chronometer.stop();
+        cout << "thread03 terminou em " << chronometer.read() << " microseconds" << endl;
+        chronometer.reset();
+    } while (Periodic_Thread::wait_next());
+    return 0;
+}
+
+int main() {
+    // https://microcontrollerslab.com/earliest-deadline-first-scheduling/
+    // teste tenta simular exemplo da figura 2 do link
+    // lembrando que no exemplo há vários momentos em que a prioridade é a mesma,
+    // e com isso a thread escolhida para execução é aleatória
+
+    const unsigned long period01 = 4000000;
+    const unsigned long period02 = 6000000;
+    const unsigned long period03 = 8000000;
+
+    Periodic_Thread::Configuration config01(period01, 6);
+    Periodic_Thread::Configuration config02(period02, 4);
+    Periodic_Thread::Configuration config03(period03, 3);
+
+    Periodic_Thread *thread01 = new Periodic_Thread(config01, &function_thread01);
+    Periodic_Thread *thread02 = new Periodic_Thread(config02, &function_thread02);
+    Periodic_Thread *thread03 = new Periodic_Thread(config03, &function_thread03);
+
+    thread01->join();
+    thread02->join();
+    thread03->join();
+
+    delete thread01;
+    delete thread02;
+    delete thread03;
+    return 0;
+}
Index: app/edf_test_traits.h
===================================================================
--- app/edf_test_traits.h	(nonexistent)
+++ app/edf_test_traits.h	(working copy)
@@ -0,0 +1,170 @@
+#ifndef __traits_h
+#define __traits_h
+
+#include <system/config.h>
+
+__BEGIN_SYS
+
+// Global Configuration
+template<typename T>
+struct Traits
+{
+    // EPOS software architecture (aka mode)
+    enum {LIBRARY, BUILTIN, KERNEL};
+
+    // CPU hardware architectures
+    enum {AVR8, H8, ARMv4, ARMv7, ARMv8, IA32, X86_64, SPARCv8, PPC32};
+
+    // Machines
+    enum {eMote1, eMote2, STK500, RCX, Cortex_A, Cortex_M, Cortex_R, PC, Leon, Virtex};
+
+    // Machine models
+    enum {Unique, Legacy_PC, eMote3, LM3S811, Realview_PBX, Zynq};
+
+    // Serial display engines
+    enum {UART, USB};
+
+    // Life span multipliers
+    enum {FOREVER = 0, SECOND = 1, MINUTE = 60, HOUR = 3600, DAY = 86400, WEEK = 604800, MONTH = 2592000, YEAR = 31536000};
+
+    // IP configuration strategies
+    enum {STATIC, MAC, INFO, RARP, DHCP};
+
+    // SmartData predictors
+    enum :unsigned char {NONE, LVP, DBP};
+
+    // Default traits
+    static const bool enabled = true;
+    static const bool debugged = true;
+    static const bool emulated = true;
+    static const bool hysterically_debugged = false;
+
+    typedef LIST<> DEVICES;
+    typedef TLIST<> ASPECTS;
+};
+
+template<> struct Traits<Build>: public Traits<void>
+{
+    static const unsigned int MODE = LIBRARY;
+    static const unsigned int ARCHITECTURE = IA32;
+    static const unsigned int MACHINE = PC;
+    static const unsigned int MODEL = Legacy_PC;
+    static const unsigned int CPUS = 1;
+    static const unsigned int NODES = 1; // > 1 => NETWORKING
+};
+
+
+// Utilities
+template<> struct Traits<Debug>: public Traits<void>
+{
+    static const bool error   = true;
+    static const bool warning = true;
+    static const bool info    = false;
+    static const bool trace   = false;
+};
+
+template<> struct Traits<Lists>: public Traits<void>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Spin>: public Traits<void>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Heaps>: public Traits<void>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Observers>: public Traits<void>
+{
+    // Some observed objects are created before initializing the Display
+    // Enabling debug may cause trouble in some Machines
+    static const bool debugged = false;
+};
+
+// System Parts (mostly to fine control debugging)
+template<> struct Traits<Boot>: public Traits<void>
+{
+};
+
+template<> struct Traits<Setup>: public Traits<void>
+{
+};
+
+template<> struct Traits<Init>: public Traits<void>
+{
+};
+
+// Mediators
+template<> struct Traits<Serial_Display>: public Traits<void>
+{
+    static const bool enabled = emulated;
+    static const int ENGINE = UART;
+    static const int COLUMNS = 80;
+    static const int LINES = 24;
+    static const int TAB_SIZE = 8;
+};
+
+template<> struct Traits<Serial_Keyboard>: public Traits<void>
+{
+    static const bool enabled = emulated;
+};
+
+__END_SYS
+
+#include __ARCH_TRAITS_H
+#include __MACH_TRAITS_H
+
+__BEGIN_SYS
+
+
+// Components
+template<> struct Traits<Application>: public Traits<void>
+{
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = Traits<Machine>::HEAP_SIZE;
+    static const unsigned int MAX_THREADS = Traits<Machine>::MAX_THREADS;
+};
+
+template<> struct Traits<System>: public Traits<void>
+{
+    static const unsigned int mode = Traits<Build>::MODE;
+    static const bool multithread = (Traits<Application>::MAX_THREADS > 1);
+    static const bool multiheap = true;
+
+    static const unsigned long LIFE_SPAN = 1 * YEAR; // s
+
+    static const bool reboot = true;
+
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = (Traits<Application>::MAX_THREADS + 1) * Traits<Application>::STACK_SIZE;
+};
+
+template<> struct Traits<Thread>: public Traits<void>
+{
+    typedef Scheduling_Criteria::EDF Criterion;
+    static const unsigned int QUANTUM = 10000; // us
+    static const bool trace_idle = hysterically_debugged;
+};
+
+template<> struct Traits<Scheduler<Thread>>: public Traits<void>
+{
+    static const bool debugged = Traits<Thread>::trace_idle || hysterically_debugged;
+};
+
+template<> struct Traits<Alarm>: public Traits<void>
+{
+    static const bool visible = hysterically_debugged;
+};
+
+template<> struct Traits<Synchronizer>: public Traits<void>
+{
+    static const bool enabled = Traits<System>::multithread;
+};
+
+__END_SYS
+
+#endif
Index: include/system/types.h
===================================================================
--- include/system/types.h	(revision 5491)
+++ include/system/types.h	(working copy)
@@ -132,6 +132,7 @@
     class Priority;
     class FCFS;
     class RR;
+    class EDF;
 };
 
 class Address_Space;
Index: include/utility/scheduler.h
===================================================================
--- include/utility/scheduler.h	(revision 5491)
+++ include/utility/scheduler.h	(working copy)
@@ -97,6 +97,19 @@
     public:
         FCFS(int p = NORMAL); // Defined at Alarm
     };
+
+    // Earliest deadline first (EDF)
+    class EDF: public Priority
+    {
+    public:
+        static const bool timed = false;
+        static const bool dynamic = true;
+        static const bool preemptive = true;
+
+        EDF(int p = NORMAL): Priority(p) {}
+
+        void update() {}
+    };
 }
 
 
